local L0_0, L1_1, L2_2, L3_3, L4_4
L0_0 = require
L1_1 = "creator"
L0_0 = L0_0(L1_1)
L1_1 = math
L1_1 = L1_1.floor
L2_2 = require
L3_3 = "globals"
L2_2 = L2_2(L3_3)
L3_3 = {}
L4_4 = {
  {
    255,
    255,
    255,
    255
  },
  {
    230,
    230,
    230,
    255
  },
  {
    200,
    200,
    200,
    255
  },
  {
    180,
    180,
    180,
    255
  },
  {
    150,
    150,
    150,
    255
  },
  {
    130,
    130,
    130,
    255
  },
  {
    100,
    100,
    100,
    255
  },
  {
    80,
    80,
    80,
    255
  },
  {
    60,
    60,
    60,
    255
  },
  {
    50,
    50,
    50,
    255
  },
  {
    30,
    30,
    30,
    255
  },
  {
    0,
    0,
    0,
    255
  },
  {
    255,
    255,
    0,
    255
  },
  {
    0,
    255,
    0,
    255
  },
  {
    0,
    255,
    255,
    255
  },
  {
    0,
    150,
    255,
    255
  },
  {
    0,
    0,
    255,
    255
  },
  {
    150,
    0,
    255,
    255
  },
  {
    255,
    0,
    255,
    255
  },
  {
    255,
    0,
    150,
    255
  },
  {
    255,
    0,
    0,
    255
  },
  {
    255,
    150,
    0,
    255
  },
  {
    255,
    200,
    50,
    255
  },
  {
    200,
    255,
    70,
    255
  },
  {
    200,
    255,
    255,
    255
  },
  {
    160,
    255,
    255,
    255
  },
  {
    120,
    255,
    255,
    255
  },
  {
    55,
    255,
    255,
    255
  },
  {
    0,
    255,
    255,
    255
  },
  {
    0,
    220,
    220,
    255
  },
  {
    0,
    190,
    190,
    255
  },
  {
    0,
    180,
    180,
    255
  },
  {
    0,
    170,
    170,
    255
  },
  {
    0,
    150,
    150,
    255
  },
  {
    0,
    100,
    100,
    255
  },
  {
    0,
    100,
    70,
    255
  },
  {
    255,
    255,
    200,
    255
  },
  {
    255,
    255,
    155,
    255
  },
  {
    255,
    255,
    130,
    255
  },
  {
    255,
    255,
    90,
    255
  },
  {
    255,
    255,
    50,
    255
  },
  {
    255,
    255,
    0,
    255
  },
  {
    230,
    230,
    0,
    255
  },
  {
    220,
    220,
    0,
    255
  },
  {
    200,
    200,
    0,
    255
  },
  {
    170,
    170,
    0,
    255
  },
  {
    120,
    120,
    0,
    255
  },
  {
    80,
    80,
    0,
    255
  },
  {
    255,
    230,
    190,
    255
  },
  {
    255,
    230,
    160,
    255
  },
  {
    250,
    210,
    120,
    255
  },
  {
    230,
    180,
    80,
    255
  },
  {
    215,
    160,
    35,
    255
  },
  {
    200,
    145,
    10,
    255
  },
  {
    190,
    140,
    0,
    255
  },
  {
    180,
    130,
    0,
    255
  },
  {
    140,
    90,
    0,
    255
  },
  {
    100,
    70,
    0,
    255
  },
  {
    255,
    230,
    200,
    255
  },
  {
    230,
    195,
    150,
    255
  },
  {
    200,
    180,
    122,
    255
  },
  {
    185,
    160,
    100,
    255
  },
  {
    155,
    135,
    70,
    255
  },
  {
    135,
    110,
    60,
    255
  },
  {
    115,
    90,
    40,
    255
  },
  {
    100,
    75,
    25,
    255
  },
  {
    95,
    70,
    20,
    255
  },
  {
    80,
    60,
    15,
    255
  },
  {
    65,
    45,
    0,
    255
  },
  {
    45,
    35,
    0,
    255
  },
  {
    255,
    220,
    230,
    255
  },
  {
    240,
    195,
    220,
    255
  },
  {
    240,
    175,
    205,
    255
  },
  {
    240,
    150,
    190,
    255
  },
  {
    240,
    125,
    175,
    255
  },
  {
    240,
    110,
    160,
    255
  },
  {
    240,
    90,
    145,
    255
  },
  {
    235,
    70,
    130,
    255
  },
  {
    235,
    50,
    120,
    255
  },
  {
    210,
    40,
    100,
    255
  },
  {
    160,
    20,
    95,
    255
  },
  {
    135,
    15,
    60,
    255
  },
  {
    255,
    235,
    235,
    255
  },
  {
    255,
    215,
    210,
    255
  },
  {
    255,
    190,
    180,
    255
  },
  {
    255,
    160,
    155,
    255
  },
  {
    255,
    135,
    130,
    255
  },
  {
    255,
    120,
    90,
    255
  },
  {
    255,
    95,
    60,
    255
  },
  {
    255,
    70,
    30,
    255
  },
  {
    255,
    0,
    0,
    255
  },
  {
    125,
    0,
    0,
    255
  },
  {
    70,
    0,
    0,
    255
  },
  {
    255,
    245,
    225,
    255
  },
  {
    255,
    235,
    190,
    255
  },
  {
    255,
    220,
    190,
    255
  },
  {
    255,
    210,
    170,
    255
  },
  {
    255,
    200,
    155,
    255
  },
  {
    255,
    195,
    125,
    255
  },
  {
    255,
    185,
    110,
    255
  },
  {
    255,
    175,
    90,
    255
  },
  {
    255,
    165,
    75,
    255
  },
  {
    255,
    130,
    0,
    255
  },
  {
    255,
    110,
    0,
    255
  },
  {
    205,
    245,
    175,
    255
  },
  {
    175,
    235,
    145,
    255
  },
  {
    120,
    210,
    95,
    255
  },
  {
    65,
    185,
    45,
    255
  },
  {
    45,
    175,
    30,
    255
  },
  {
    15,
    165,
    0,
    255
  },
  {
    10,
    130,
    0,
    255
  },
  {
    5,
    100,
    0,
    255
  },
  {
    5,
    70,
    0,
    255
  },
  {
    5,
    50,
    0,
    255
  },
  {
    230,
    240,
    235,
    255
  },
  {
    210,
    225,
    215,
    255
  },
  {
    190,
    210,
    195,
    255
  },
  {
    165,
    190,
    175,
    255
  },
  {
    155,
    180,
    165,
    255
  },
  {
    140,
    175,
    155,
    255
  },
  {
    95,
    140,
    110,
    255
  },
  {
    80,
    130,
    100,
    255
  },
  {
    70,
    120,
    90,
    255
  },
  {
    60,
    115,
    80,
    255
  },
  {
    30,
    100,
    60,
    255
  },
  {
    0,
    65,
    25,
    255
  },
  {
    175,
    200,
    245,
    255
  },
  {
    145,
    175,
    230,
    255
  },
  {
    95,
    135,
    210,
    255
  },
  {
    45,
    80,
    185,
    255
  },
  {
    30,
    65,
    175,
    255
  },
  {
    0,
    40,
    165,
    255
  },
  {
    0,
    40,
    130,
    255
  },
  {
    0,
    35,
    100,
    255
  },
  {
    0,
    25,
    70,
    255
  },
  {
    0,
    15,
    50,
    255
  },
  {
    250,
    250,
    255,
    255
  },
  {
    230,
    235,
    255,
    255
  },
  {
    225,
    225,
    255,
    255
  },
  {
    215,
    220,
    240,
    255
  },
  {
    175,
    185,
    225,
    255
  },
  {
    125,
    140,
    195,
    255
  },
  {
    100,
    120,
    190,
    255
  },
  {
    85,
    105,
    185,
    255
  },
  {
    60,
    90,
    165,
    255
  },
  {
    30,
    80,
    155,
    255
  },
  {
    0,
    60,
    145,
    255
  },
  {
    25,
    35,
    95,
    255
  }
}
L3_3.colors = L4_4
L4_4 = {}
table.insert(L4_4, {
  "steve",
  "0E0903#0D0803#120C06#0D0803#0D0903#0E0902#0E0903#100A04#0E0904#0E0904#120C05#120C05#160D05#130C05#100A04#0E0903#110B05#DCB796#E4C1A3#E1BD9E#E4C0A4#DCB495#D3A67B#120C05#D8B08E#DCB696#DDB799#DCB698#DEB79A#DDB494#CFA372#CA9968#D4A886#FFFFFF#0F7FCE#DAB395#E1BB9D#0E7BCA#FFFFFF#BB895D#BA7D50#D2A478#DAAD8E#562D20#562D20#DBAD88#BE8A51#A5663E#A0613E#A96841#6A3928#683727#663424#723C2C#A26740#9D613D#6F3D25#743C25#85492D#7E442A#82482E#8E5235#935938#905637#"
})
table.insert(L4_4, {
  "creeper",
  "A5CD9F#13A90F#4CB341#9DC79D#D2D2D2#85DC74#7DCC6E#4D904A#299326#5FC559#41B736#6EC965#4C9148#70DC5D#65BC55#D2D2D2#47C536#1F5417#385831#93D78C#579856#1E4E18#385831#DCDCDC#4CCB3D#1E4E18#000000#67CF55#47B239#000000#173A14#78CE67#89D282#65B757#94D78E#1C4F14#1D4C16#C3D2C0#488C45#5ED04C#A4D29A#51974E#385831#000000#000000#1F5518#67D755#BFD2BB#C2E2BB#67A166#000000#000000#000000#000000#5FBC50#51984D#67D755#82DE70#173A14#93D284#AED0A8#1D4C16#3B8E37#68CF57#"
})
table.insert(L4_4, {
  "pig",
  "EC9A97#E08884#EC9899#EC989A#EDA1A1#EAA29F#EE9D9F#EFA7A6#E59494#E38585#EF9F9F#EEA29F#EC9A9A#F0A7A5#F1AFAD#F1B0AC#E89696#EDA4A1#EFA9A3#EDA7A4#EEA3A4#EFA3A6#EFA9A7#F1B3AD#020001#FFFFFF#EE9E9E#EE9E9E#EFA9A7#F0A7A5#FFFFFF#020001#EC9699#EFA0A2#EDBABC#F1C3C5#EFC2C4#F1C3C5#F1B1AD#EBA6A4#EEA29F#EEA29F#914B4A#EFA2A3#F0A9AA#9C5150#F0AFAE#F1AFAD#EC9397#EC969A#C37E84#C7848A#CEA29A#D08D8D#F0B4B2#EFB1AF#EE9F9B#EB9D9D#EEA3A2#EFA9A6#EEB0AC#EEA9A9#F0AEAB#F1AFAD#"
})
table.insert(L4_4, {
  "sheep",
  "E6E6E6#E5E5E5#EAEAEA#D4D4D4#D1D1D1#CCCCCC#D0D0D0#C6C6C6#D7D7D7#D7D7D7#CACACA#C8C8C8#C8C8C8#C8C8C8#D0D0D0#BEBEBE#C8C8C8#B7987F#B3957C#B7987F#B89C87#AE917A#AE917A#C5C5C5#EAEAEA#080808#FFFFFF#AB8A70#AB8A70#FFFFFF#000000#C9C9C9#C8C8C8#8F725E#A9866A#A68368#A68368#8B6E5A#8B6E5A#CBCBCB#C8C8C8#EAEAEA#957864#FFB6B6#FFB6B6#8F725E#D5D5D5#D6D6D6#C5C5C5#C8C8C8#8F725E#D49797#DB9E9E#8F725E#D5D5D5#DBDBDB#C3C3C3#D1D1D1#D9D9D9#D3D3D3#DADADA#DADADA#D9D9D9#D3D3D3#"
})
table.insert(L4_4, {
  "cow",
  "3F3024#433525#3F3024#B3B3B3#B3B3B3#818181#818181#352A1F#443626#443626#443626#B7B7B7#B7B7B7#B3B3B3#352A1F#433525#C9C9C9#C9C9C9#433525#B3B3B3#B3B3B3#433525#C9C9C9#C9C9C9#000000#FFFFFF#3F3024#A1A1A1#3F3024#3F3024#FFFFFF#000000#3F3024#3F3024#3F3024#3F3024#3F3024#3F3024#3F3024#3F3024#3F3024#352A1F#DCDCDC#DCDCDC#DCDCDC#DCDCDC#34291E#3F3024#3F3024#DCDCDC#000000#606060#606060#000000#DCDCDC#352A1F#3F3024#C4C4C4#606060#494949#494949#606060#DCDCDC#3F3024#"
})
table.insert(L4_4, {
  "spider",
  "4B423A#A60202#52483F#52483F#4D443B#433B33#620000#443B34#494038#52483F#620000#51473F#494037#A60202#373029#433B33#A60202#52483F#554B41#4B423A#433B33#494038#3B342D#FF0E0E#620000#4E453C#FF0E0E#A60202#FF0E0E#A60202#3A332C#A60202#433B33#4D443B#A60202#620000#A60202#620000#3A332C#494038#423A32#4D443B#584E44#494038#332C27#4B4239#3B342D#463E35#423A32#585654#100D0B#463E35#342E28#0C0907#555351#4B4239#423A32#575552#100D0B#463E35#3B342C#0C0907#51504E#463E35#"
})
table.insert(L4_4, {
  "skeleton",
  "A1A1A1#9B9B9B#A3A3A3#919191#888888#8F8F8F#9B9B9B#989898#9B9B9B#9B9B9B#9B9B9B#AAAAAA#C1C1C1#BEBEBE#9B9B9B#919191#9B9B9B#C7C7C7#CACACA#D8D8D8#CFCFCF#CFCFCF#BABABA#AAAAAA#BABABA#C4C4C4#BABABA#C1C1C1#AFAFAF#CACACA#AAAAAA#AAAAAA#C4C4C4#494949#494949#C4C4C4#CACACA#494949#494949#BABABA#A7A7A7#C1C1C1#CACACA#828282#828282#CACACA#AAAAAA#8F8F8F#9E9E9E#494949#494949#494949#494949#494949#494949#9A9A9A#828282#7F7F7F#858585#858585#919191#858585#949494#888888#"
})
table.insert(L4_4, {
  "zombie",
  "467536#436D35#4B7537#3C6730#385E2A#3B622F#436D35#436934#436D35#436D35#436D35#4E7D3D#59953D#5B9142#466D36#3C6730#436D35#679056#6D955B#799C65#71955B#6F955C#5E8747#4F7D3E#638551#6A8D56#638551#698756#5A7B48#70945A#517B3C#517B3C#6A8D56#1A1A1A#1A1A1A#6B8D50#70945A#1A1A1A#1A1A1A#638551#4E7B36#668D4E#73905A#385226#385226#6B9555#4D7F37#3A6529#497135#487532#3F652D#4E6D30#4E6D30#375A25#447131#3F652D#335622#315520#375A25#375A25#3F652D#375A25#42672F#395E27#"
})
table.insert(L4_4, {
  "enderman",
  "000000#161616#000000#000000#000000#000000#161616#000000#000000#161616#161616#000000#000000#161616#161616#000000#161616#000000#161616#161616#161616#161616#000000#161616#000000#000000#161616#161616#161616#161616#000000#000000#E079FA#CC00FA#E079FA#161616#161616#E079FA#CC00FA#E079FA#161616#000000#000000#161616#161616#000000#000000#161616#000000#161616#161616#000000#000000#161616#161616#000000#161616#000000#000000#000000#000000#000000#000000#161616#"
})
table.insert(L4_4, {
  "villager",
  "BD8B72#B57B67#BD8B72#B57B67#B57B67#B57B67#BD8B72#B57B67#BD8B72#B57B67#B57B67#B57B67#B57B67#B57B67#BD8B72#B57B67#BD8B72#B57B67#B57B67#B57B67#B57B67#B57B67#BD8B72#B57B67#B57B67#332411#332411#332411#332411#332411#332411#B57B67#BD8B72#FFFFFF#009611#B57B67#B57B67#009611#FFFFFF#BD8B72#905E43#B37B62#B78272#905E43#905E43#BE886C#B37B62#905E43#905E43#B37B62#774235#905E43#905E43#774235#B37B62#905E43#905E43#B37B62#B37B62#905E43#905E43#B37B62#B37B62#905E43#"
})
table.insert(L4_4, {
  "slime",
  "99D68A#99D68A#99D68A#8CC17E#99D68A#99D68A#99D68A#99D68A#99D68A#8CC17E#8CC17E#8CC17E#8CC17E#8CC17E#8CC17E#99D68A#99D68A#263C12#263C12#8CC17E#8CC17E#263C12#263C12#99D68A#99D68A#263C12#263C12#8CC17E#89BC7C#263C12#263C12#99D68A#8CC17E#8CC17E#8CC17E#89BC7C#8CC17E#89BC7C#8CC17E#99D68A#99D68A#8CC17E#8CC17E#8CC17E#263C12#8CC17E#8CC17E#8CC17E#99D68A#8CC17E#8CC17E#8CC17E#8CC17E#8CC17E#8CC17E#99D68A#99D68A#99D68A#99D68A#8CC17E#99D68A#92CD84#99D68C#99D68C#"
})
table.insert(L4_4, {
  "blaze",
  "F5D238#FFC400#FFF547#EBB41A#FFDE28#FFD528#FFFF5F#FFF647#EBC138#FFDB4B#FFC400#FFDE28#FFDE28#EBB41A#FFDE51#FFBE37#C68218#FFC427#E9A921#FFD52B#FFC427#E9A921#E9A921#C68218#DBA821#FFFF84#310E0B#FFDE28#E9A921#310E0B#FFFF84#C68218#5E3201#DB9B01#C58801#C47418#E18500#C47418#C58801#D98902#5E3401#6C3100#6C3100#220000#3B0201#8B3401#6C4F28#6C3100#623B01#321501#320F0F#3B0201#220000#4F0100#6C3100#220000#280C02#310E0B#250B00#310E0B#450000#3E0A08#220000#220400#"
})
table.insert(L4_4, {
  "wither",
  "2B2B2B#252525#2C2C2C#1C1C1C#141414#1A1A1A#252525#222222#252525#252525#252525#333333#474747#454545#252525#1C1C1C#252525#4D4D4D#505050#5C5C5C#545454#545454#414141#333333#141414#141414#141414#474747#373737#141414#141414#141414#4A4A4A#C1C1C1#C1C1C1#4A4A4A#505050#C1C1C1#C1C1C1#414141#303030#474747#474747#505050#474747#505050#333333#1A1A1A#282828#141414#C1C1C1#C1C1C1#C1C1C1#C1C1C1#141414#1C1C1C#141414#0C0C0C#141414#141414#1F1F1F#141414#1F1F1F#141414#"
})
table.insert(L4_4, {
  "zombiepigman",
  "B8B8B8#719054#99A988#446523#446523#DD918E#EC9EA0#F0A6A5#C0C2BE#C7C7C7#669458#77975B#40621E#F0A6A5#F0B1AC#F0B1AC#B8B8B8#ABACAB#99A988#85917A#5C7D3D#F0A6A5#EDA5A4#F0B1AC#192018#203908#B8B8B8#547535#D27C78#EDA5A4#FAF3F3#000000#ABACAB#989A96#646563#59753C#E1AEB0#F0C3C5#F0B1AC#4D7821#9EA39A#8D9383#904D4C#5C7D3D#547535#975757#F0B1AC#B58383#7B896C#325410#455B30#5D6159#506F33#506F33#DB9592#3E6516#B8B8B8#677C52#49652F#63794E#73885E#4B6C2B#4B6C2B#446523#"
})
table.insert(L4_4, {
  "mooshroom",
  "980204#9C0400#980204#ABABAB#ABABAB#767676#767676#7B0703#9C0400#9C0400#9C0400#B0B0B0#B0B0B0#ABABAB#7B0703#9C0400#000000#000000#9C0400#ABABAB#ABABAB#9C0400#000000#000000#000000#000000#980204#989898#980204#980204#000000#000000#980204#980204#980204#980204#980204#980204#980204#980204#980204#7B0703#D8D8D8#D8D8D8#D8D8D8#D8D8D8#7A0604#980204#980204#D8D8D8#000000#555555#555555#000000#D8D8D8#7B0703#980204#BEBEBE#555555#3E3E3E#3E3E3E#555555#D8D8D8#980204#"
})
table.insert(L4_4, {
  "witch",
  "AB9F8D#A39483#AB9F8D#A39483#A39483#A39483#AB9F8D#A39483#AB9F8D#A39483#A39483#A39483#A39483#A39483#AB9F8D#A39483#AB9F8D#A39483#A39483#A39483#A39483#A39483#AB9F8D#A39483#A39483#2C2918#2C2918#2C2918#2C2918#2C2918#2C2918#A39483#AB9F8D#FFFFFF#7A5E70#A39483#A39483#7A5E70#FFFFFF#AB9F8D#80725E#A09280#AB9D89#905E43#905E43#AB9D89#A09280#80725E#80725E#A09280#A09280#905E43#905E43#A09280#A09280#80725E#80725E#A09280#A09280#905E43#905E43#A09280#A09280#80725E#"
})
table.insert(L4_4, {
  "magmacube",
  "160000#000000#000000#190000#340400#340000#000000#040000#0A0000#0A0000#190000#300000#341A00#340200#190000#0E0000#120000#CD0000#CD0000#120000#0E0000#CD0000#CD0000#120000#260000#FC5700#FCFC00#300000#0A0000#FCFC00#FC5700#2A0000#120000#340200#341A00#0E0000#000000#230000#340000#340000#0E0000#0E0000#000000#0E0000#300000#340000#340800#341A00#000000#000000#0A0000#260000#341A00#340000#340000#340000#000000#000000#340800#341A00#190000#0A0000#000000#300000#"
})
table.insert(L4_4, {
  "zombievillager",
  "658953#355928#3A602C#3A602A#3A602A#2C4A21#324927#2C4A21#557A42#355928#3A602A#3A602A#355928#355928#425735#355928#4C723A#3A602A#3A602A#355928#4B7039#547941#658953#355928#3A602A#170A0A#170A0A#170A0A#170A0A#170A0A#170A0A#355928#3A602C#EAEAE2#793737#355928#355928#793737#EAEAE2#3A602C#2F5024#335828#365C2A#464D29#464D29#40692F#335828#2F5024#2F5024#335828#243D1C#404A26#464D29#243D1C#335828#2F5024#2F5024#335828#335828#404A26#404A26#335828#335828#2F5024#"
})
for _FORV_9_ = 1, #L4_4 do
  ({})[L4_4[_FORV_9_][2]] = L4_4[_FORV_9_][1]
end
for _FORV_10_ = 1, #L4_4 do
  ({})[L4_4[_FORV_10_][1]] = L4_4[_FORV_10_][2]
end
function L3_3.makeAvatar(A0_5)
  local L1_6, L2_7, L3_8, L4_9, L5_10, L6_11, L7_12, L8_13
  if not A0_5 then
    L1_6 = {}
    A0_5 = L1_6
  end
  L1_6 = A0_5.avatar
  L2_7 = A0_5.scale
  L2_7 = L2_7 or 10
  if L1_6 then
    L4_9 = L1_6
    L3_8 = L1_6.find
    L5_10 = "#"
    L3_8 = L3_8(L4_9, L5_10)
  elseif L3_8 == nil then
    L3_8 = _UPVALUE0_
    L1_6 = L3_8.steve
  end
  L3_8 = _UPVALUE1_
  L3_8 = L3_8.checkAvatar
  L4_9 = L1_6
  L3_8 = L3_8(L4_9)
  L4_9 = nil
  L5_10 = _UPVALUE1_
  L5_10 = L5_10.colors
  if L3_8 == false then
    L6_11 = {}
    L7_12 = _UPVALUE2_
    L7_12 = L7_12.split
    L8_13 = L1_6
    L7_12 = L7_12(L8_13, "#")
    L8_13 = display
    L8_13 = L8_13.newGroup
    L8_13 = L8_13()
    full_avatar = L8_13
    L8_13 = #L7_12
    L8_13 = L8_13 - 1
    for _FORV_12_ = 0, L8_13 do
      L6_11[_FORV_12_] = display.newRect(_FORV_12_ % 8 * L2_7, _UPVALUE3_(_FORV_12_ / 8) * L2_7, L2_7, L2_7)
      L6_11[_FORV_12_]:setFillColor(_UPVALUE2_.hexToRgb(L7_12[_FORV_12_ + 1])[1], _UPVALUE2_.hexToRgb(L7_12[_FORV_12_ + 1])[2], _UPVALUE2_.hexToRgb(L7_12[_FORV_12_ + 1])[3])
      full_avatar:insert(L6_11[_FORV_12_])
    end
    _FOR_.isFromImage = false
  else
    L6_11 = display
    L6_11 = L6_11.newImageRect
    L7_12 = "avatars/"
    L8_13 = L3_8
    L7_12 = L7_12 .. L8_13 .. ".png"
    L8_13 = L2_7 * 8
    L6_11 = L6_11(L7_12, L8_13, L2_7 * 8)
    full_avatar = L6_11
    L6_11 = full_avatar
    L6_11.isFromImage = true
  end
  L6_11 = full_avatar
  L7_12 = full_avatar
  L7_12 = L7_12.xScale
  L6_11.origXScale = L7_12
  L6_11 = full_avatar
  L7_12 = full_avatar
  L7_12 = L7_12.yScale
  L6_11.origYScale = L7_12
  L6_11 = full_avatar
  return L6_11
end
function L3_3.checkAvatar(A0_14)
  local L1_15
  L1_15 = _UPVALUE0_
  L1_15 = L1_15[A0_14]
  if L1_15 then
    L1_15 = _UPVALUE0_
    L1_15 = L1_15[A0_14]
    return L1_15
  else
    L1_15 = false
    return L1_15
  end
end
function L3_3.checkAvatarsById(A0_16)
  local L1_17
  L1_17 = _UPVALUE0_
  L1_17 = L1_17[A0_16]
  if L1_17 then
    L1_17 = _UPVALUE0_
    L1_17 = L1_17[A0_16]
    return L1_17
  else
    L1_17 = nil
    return L1_17
  end
end
function L3_3.getCachedAvatars()
  local L0_18, L1_19, L3_20
  L0_18 = {}
  for _FORV_4_ = 1, #L3_20 do
    table.insert(L0_18, _UPVALUE0_[_FORV_4_][1])
  end
  return L0_18
end
return L3_3
